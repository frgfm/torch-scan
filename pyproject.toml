[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "torchscan"
description = "Useful information about your Pytorch module"
authors = [
    {name = "FranÃ§ois-Guillaume Fernandez", email = "fg-feedback@protonmail.com"}
]
readme = "README.md"
requires-python = ">=3.8,<4"
license = {file = "LICENSE"}
keywords = ["pytorch", "deep learning", "summary", "memory", "ram"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dynamic = ["version"]
dependencies = [
    "torch>=2.0.0,<3.0.0",
]

[project.optional-dependencies]
test = [
    "pytest>=7.3.2",
    "pytest-cov>=3.0.0,<5.0.0",
    "pytest-pretty>=1.0.0,<2.0.0",
]
quality = [
    "ruff==0.1.14",
    "mypy==1.8.0",
    "pre-commit>=3.0.0,<4.0.0",
]
docs = [
    "sphinx>=3.0.0,!=3.5.0",
    "furo>=2022.3.4",
    "sphinxemoji>=0.1.8",
    "sphinx-copybutton>=0.3.1",
    # Indirect deps
    # cf. https://github.com/readthedocs/readthedocs.org/issues/9038
    "Jinja2<3.1",
]
dev = [
    # test
    "pytest>=7.3.2",
    "pytest-cov>=3.0.0,<5.0.0",
    "pytest-pretty>=1.0.0,<2.0.0",
    # style
    "ruff==0.1.14",
    "mypy==1.8.0",
    "pre-commit>=3.0.0,<4.0.0",
    # docs
    "sphinx>=3.0.0,!=3.5.0",
    "furo>=2022.3.4",
    "sphinxemoji>=0.1.8",
    "sphinx-copybutton>=0.3.1",
    "Jinja2<3.1",
]

[project.urls]
documentation = "https://frgfm.github.io/torch-scan"
repository = "https://github.com/frgfm/torch-scan"
tracker = "https://github.com/frgfm/torch-scan/issues"
changelog = "https://frgfm.github.io/torch-scan/latest/changelog.html"

[tool.setuptools]
zip-safe = true

[tool.setuptools.packages.find]
exclude = ["docs*", "scripts*", "tests*"]

[tool.pytest.ini_options]
testpaths = ["torchscan/"]

[tool.coverage.run]
source = ["torchscan/"]

[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "D101", "D103",  # pydocstyle missing docstring in public function/class
    "D201","D202","D207","D208","D214","D215","D300","D301","D417", "D419",  # pydocstyle
    "F",  # pyflakes
    "I",  # isort
    "C4",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "CPY001",  # flake8-copyright
    "ISC",  # flake8-implicit-str-concat
    "PYI",  # flake8-pyi
    "NPY",  # numpy
    "PERF",  # perflint
    "RUF",  # ruff specific
    "PTH",  # flake8-use-pathlib
    "S",  # flake8-bandit
    "N",  # pep8-naming
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "PT",  # flake8-pytest-style
    "LOG",  # flake8-logging
    "SIM",  # flake8-simplify
    "YTT",  # flake8-2020
    "ANN",  # flake8-annotations
    "ASYNC",  # flake8-async
    "BLE",  # flake8-blind-except
    "A",  # flake8-builtins
    "ICN",  # flake8-import-conventions
    "PIE",  # flake8-pie
    "ARG",  # flake8-unused-arguments
    "FURB",  # refurb
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B904",  # raise from
    "C901",  # too complex
    "F403",  # star imports
    "E731",  # lambda assignment
    "C416",  # list comprehension to list()
    "ANN101",  # missing type annotations on self
    "ANN102",  # missing type annotations on cls
    "ANN002",  # missing type annotations on *args
    "ANN003",  # missing type annotations on **kwargs
    "COM812",  # trailing comma missing
    "N812",  # lowercase imported as non-lowercase
    "ISC001",  # implicit string concatenation (handled by format)
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed
]
exclude = [".git"]
line-length = 120
target-version = "py39"
preview = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"

[tool.ruff.per-file-ignores]
"**/__init__.py" = ["I001", "F401", "CPY001"]
"scripts/**.py" = ["D", "T201", "N812", "S101", "ANN"]
".github/**.py" = ["D", "T201", "S602", "S101", "ANN"]
"docs/**.py" = ["E402", "D103", "ANN", "A001", "ARG001"]
"tests/**.py" = ["D101", "D103", "CPY001", "S101", "PT011", "ANN"]
"demo/**.py" = ["D103", "ANN"]
"setup.py" = ["T201"]
"torchscan/process/memory.py" = ["S60"]

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.isort]
known-first-party = ["torchscan", "app"]
known-third-party = ["torch", "torchvision"]

[tool.mypy]
python_version = "3.9"
files = "torchscan/"
show_error_codes = true
pretty = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
no_implicit_optional = true
disallow_untyped_calls = true
check_untyped_defs = true
implicit_reexport = false
disallow_untyped_defs = true
explicit_package_bases = true
